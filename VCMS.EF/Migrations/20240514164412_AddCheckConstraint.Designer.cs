// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VCMS.EF.Data;

#nullable disable

namespace VCMS.EF.Migrations
{
    [DbContext(typeof(VCMSDbContext))]
    [Migration("20240514164412_AddCheckConstraint")]
    partial class AddCheckConstraint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VCMS.Core.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CaseType")
                        .HasColumnType("TINYINT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("DATE");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Cases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaseType = (byte)0,
                            Date = new DateOnly(2023, 1, 1),
                            DiagnosisId = 12,
                            DoctorId = 1,
                            Notes = "Take them away from ducks.",
                            PatientId = 1,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 2,
                            CaseType = (byte)0,
                            Date = new DateOnly(2023, 1, 2),
                            DiagnosisId = 14,
                            DoctorId = 1,
                            Notes = "Take them away from chicken.",
                            PatientId = 2,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 3,
                            CaseType = (byte)0,
                            Date = new DateOnly(2023, 1, 3),
                            DiagnosisId = 7,
                            DoctorId = 1,
                            Notes = "Take them the water with medication before eating.",
                            PatientId = 3,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 4,
                            CaseType = (byte)1,
                            Date = new DateOnly(2023, 1, 4),
                            DiagnosisId = 16,
                            DoctorId = 1,
                            Notes = "Dont't begin work after one month",
                            PatientId = 4,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 5,
                            CaseType = (byte)0,
                            Date = new DateOnly(2023, 1, 5),
                            DiagnosisId = 2,
                            DoctorId = 1,
                            PatientId = 5,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 6,
                            CaseType = (byte)0,
                            Date = new DateOnly(2023, 2, 15),
                            DiagnosisId = 15,
                            DoctorId = 1,
                            PatientId = 2,
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Tahway - Uomo Street",
                            FirstName = "Mohamed",
                            LastName = "Badwy",
                            PhoneNumber = "01553414588"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tahway - Uomo Street",
                            FirstName = "Elsaid",
                            LastName = "Badwy",
                            PhoneNumber = "01063090820"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Tahway - Saafna Street",
                            FirstName = "Mazen",
                            LastName = "Fatouha",
                            PhoneNumber = "01036547892"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Tahway - Saafna Street",
                            FirstName = "Hazem",
                            LastName = "Fatouha",
                            PhoneNumber = "01036564892"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Tahway - Saafna Street",
                            FirstName = "Fatouha",
                            LastName = "Ekaref",
                            PhoneNumber = "01366564892"
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Diagnostics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Head Lice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Onchocerciasis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Strongyloidiasis"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ascariasis"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Trichuriasis"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Enterobiasis"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Antiparasitic"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Liver Fluke"
                        },
                        new
                        {
                            Id = 9,
                            Name = "External Parasites"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Lung Worms"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Gastrointestinal Roundworms"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Coccidiosis"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Avian Influenza"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Intestinal Diarrhea"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Protection"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Wounds"
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("YearGraduated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "badwyelsaid@gmail.com",
                            FirstName = "Badwy",
                            LastName = "Elsaid",
                            PhoneNumber = "01112516588",
                            YearGraduated = 1990
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("CostPricePerItem")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("DATE");

                    b.Property<string>("GenericName")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("SalePricePerItem")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Semi-Synthetic Antiparasitic",
                            CostPricePerItem = 500m,
                            ExpirationDate = new DateOnly(2027, 1, 1),
                            GenericName = "Ivomec",
                            SalePricePerItem = 550m,
                            TradeName = "Ivomaac Super",
                            Unit = "50 ml",
                            UnitInStock = 20
                        },
                        new
                        {
                            Id = 2,
                            Category = "Semi-Synthetic Antiparasitic",
                            CostPricePerItem = 45m,
                            ExpirationDate = new DateOnly(2026, 1, 1),
                            GenericName = "Ivermectin",
                            SalePricePerItem = 70m,
                            TradeName = "Ivomaac Normal",
                            Unit = "50 ml",
                            UnitInStock = 30
                        },
                        new
                        {
                            Id = 3,
                            Category = "Semi-Synthetic Antiparasitic, Liver Fluke",
                            CostPricePerItem = 80m,
                            ExpirationDate = new DateOnly(2027, 6, 1),
                            GenericName = "Dictomec",
                            SalePricePerItem = 120m,
                            TradeName = "Ivomaac Super",
                            Unit = "50 ml",
                            UnitInStock = 30
                        },
                        new
                        {
                            Id = 4,
                            Category = "Semi-Synthetic Antiparasitic, Liver Fluke",
                            CostPricePerItem = 45m,
                            ExpirationDate = new DateOnly(2025, 6, 1),
                            GenericName = "Venomectin S",
                            SalePricePerItem = 100m,
                            TradeName = "Ivomaac Super",
                            Unit = "50 ml",
                            UnitInStock = 15
                        },
                        new
                        {
                            Id = 5,
                            Category = "Stimulation of the Metabolism",
                            CostPricePerItem = 45m,
                            ExpirationDate = new DateOnly(2026, 2, 26),
                            GenericName = "Vetazal",
                            SalePricePerItem = 80m,
                            TradeName = "Stimulating",
                            Unit = "100 ml",
                            UnitInStock = 10
                        },
                        new
                        {
                            Id = 6,
                            Category = "Antibiotic",
                            CostPricePerItem = 40m,
                            ExpirationDate = new DateOnly(2025, 12, 30),
                            GenericName = "Oxytetracycline 20%",
                            SalePricePerItem = 60m,
                            TradeName = "Antibiotic",
                            Unit = "30 ml",
                            UnitInStock = 10
                        },
                        new
                        {
                            Id = 7,
                            Category = "Penicillin",
                            CostPricePerItem = 25m,
                            ExpirationDate = new DateOnly(2026, 5, 1),
                            GenericName = "Vetrocin",
                            SalePricePerItem = 35m,
                            TradeName = "Penicillin",
                            Unit = "8 gm",
                            UnitInStock = 25
                        },
                        new
                        {
                            Id = 8,
                            Category = "Anticoccidial",
                            CostPricePerItem = 25m,
                            ExpirationDate = new DateOnly(2026, 1, 1),
                            GenericName = "Clazox",
                            SalePricePerItem = 50m,
                            TradeName = "Anticoccidial",
                            Unit = "100 ml",
                            UnitInStock = 30
                        },
                        new
                        {
                            Id = 9,
                            Category = "Antitoxin - Antifungal",
                            CostPricePerItem = 10m,
                            ExpirationDate = new DateOnly(2028, 1, 1),
                            GenericName = "Sendex",
                            SalePricePerItem = 15m,
                            TradeName = "Antitoxin - Antifungal",
                            Unit = "100 ml",
                            UnitInStock = 100
                        },
                        new
                        {
                            Id = 10,
                            Category = "Antibiotic",
                            CostPricePerItem = 10m,
                            ExpirationDate = new DateOnly(2028, 3, 1),
                            GenericName = "Oxytetracycline 20%",
                            SalePricePerItem = 15m,
                            TradeName = "Antibiotic",
                            Unit = "20 gm",
                            UnitInStock = 30
                        },
                        new
                        {
                            Id = 11,
                            Category = "Antibiotic",
                            CostPricePerItem = 20m,
                            ExpirationDate = new DateOnly(2028, 3, 1),
                            GenericName = "New Oxy",
                            SalePricePerItem = 24m,
                            TradeName = "Antibiotic",
                            Unit = "8 Tablets in Two Strips",
                            UnitInStock = 100
                        },
                        new
                        {
                            Id = 12,
                            Category = "Vitamins",
                            CostPricePerItem = 7m,
                            ExpirationDate = new DateOnly(2028, 3, 1),
                            GenericName = "Vitamid",
                            SalePricePerItem = 10m,
                            TradeName = "Vitamins",
                            Unit = "20 gm",
                            UnitInStock = 100
                        },
                        new
                        {
                            Id = 13,
                            Category = "Vitamins",
                            CostPricePerItem = 5m,
                            ExpirationDate = new DateOnly(2028, 3, 1),
                            GenericName = "AD3H",
                            SalePricePerItem = 7.5m,
                            TradeName = "Vitamins",
                            Unit = "100 ml",
                            UnitInStock = 200
                        },
                        new
                        {
                            Id = 14,
                            Category = "Calcium",
                            CostPricePerItem = 5m,
                            ExpirationDate = new DateOnly(2028, 3, 1),
                            GenericName = "Pure Phose",
                            SalePricePerItem = 7.5m,
                            TradeName = "Calcium",
                            Unit = "100 ml",
                            UnitInStock = 300
                        },
                        new
                        {
                            Id = 15,
                            Category = "Intestinal Diarrhea - Protection",
                            CostPricePerItem = 2.1m,
                            ExpirationDate = new DateOnly(2027, 3, 1),
                            GenericName = "Cloromophincol",
                            SalePricePerItem = 5m,
                            TradeName = "Antibiotic",
                            Unit = "100 ml",
                            UnitInStock = 120
                        },
                        new
                        {
                            Id = 16,
                            Category = "Intestinal Diarrhea - Protection",
                            CostPricePerItem = 2.1m,
                            ExpirationDate = new DateOnly(2027, 3, 1),
                            GenericName = "Newvit",
                            SalePricePerItem = 5m,
                            TradeName = "Antibiotic",
                            Unit = "100 ml",
                            UnitInStock = 120
                        },
                        new
                        {
                            Id = 17,
                            Category = "Protection",
                            CostPricePerItem = 2.1m,
                            ExpirationDate = new DateOnly(2027, 3, 1),
                            GenericName = "Oxy 1 2 3",
                            SalePricePerItem = 5m,
                            TradeName = "Antibiotic",
                            Unit = "100 ml",
                            UnitInStock = 120
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<byte>("Sex")
                        .HasColumnType("TINYINT");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = "15 Days",
                            ClientId = 1,
                            Count = 10,
                            Sex = (byte)0,
                            SpeciesId = 6
                        },
                        new
                        {
                            Id = 2,
                            Age = "20 Days",
                            ClientId = 2,
                            Count = 15,
                            Sex = (byte)0,
                            SpeciesId = 8
                        },
                        new
                        {
                            Id = 3,
                            Age = "6 Months",
                            ClientId = 3,
                            Count = 1,
                            Sex = (byte)0,
                            SpeciesId = 11
                        },
                        new
                        {
                            Id = 4,
                            Age = "2 Years and One Month",
                            ClientId = 4,
                            Count = 1,
                            Sex = (byte)0,
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 5,
                            Age = "1 Year and Two Months",
                            ClientId = 5,
                            Count = 2,
                            Sex = (byte)0,
                            SpeciesId = 1
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.PrescribedMeds", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasComputedColumnSql("Quantity * Price");

                    b.HasKey("PrescriptionId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PrescriptionId", "MedicationId");

                    b.ToTable("PrescribedMeds", (string)null);

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            MedicationId = 8,
                            Frequency = "1 ml for 1 litre.",
                            Price = 50m,
                            Quantity = 2,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 1,
                            MedicationId = 11,
                            Frequency = "1 tablet for 4 litre.",
                            Price = 24m,
                            Quantity = 2,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 2,
                            MedicationId = 15,
                            Frequency = "1 gm for 1 litre.",
                            Price = 5m,
                            Quantity = 2,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 2,
                            MedicationId = 16,
                            Frequency = "1 gm for 1 litre.",
                            Price = 5m,
                            Quantity = 2,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 3,
                            MedicationId = 4,
                            Frequency = "1 ml for 50 kg.",
                            Price = 100m,
                            Quantity = 1,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 4,
                            MedicationId = 7,
                            Frequency = "1 ml for 50 kg.",
                            Price = 35m,
                            Quantity = 3,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 4,
                            MedicationId = 6,
                            Frequency = "1 ml for 50 kg.",
                            Price = 60m,
                            Quantity = 2,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 5,
                            MedicationId = 4,
                            Frequency = "1 ml for 50 kg.",
                            Price = 100m,
                            Quantity = 1,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 6,
                            MedicationId = 17,
                            Frequency = "1 gm for 1 litre.",
                            Price = 5m,
                            Quantity = 3,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 6,
                            MedicationId = 16,
                            Frequency = "1 gm for 1 litre.",
                            Price = 5m,
                            Quantity = 3,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 6,
                            MedicationId = 14,
                            Frequency = "2 ml for 1 litre.",
                            Price = 7.5m,
                            Quantity = 3,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 6,
                            MedicationId = 13,
                            Frequency = "2 ml for 1 litre.",
                            Price = 7.5m,
                            Quantity = 3,
                            TotalPrice = 0m
                        },
                        new
                        {
                            PrescriptionId = 6,
                            MedicationId = 12,
                            Frequency = "1 gm for 1 litre.",
                            Price = 10m,
                            Quantity = 3,
                            TotalPrice = 0m
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("Prescriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaseId = 1,
                            Date = new DateOnly(2023, 1, 1)
                        },
                        new
                        {
                            Id = 2,
                            CaseId = 2,
                            Date = new DateOnly(2023, 1, 2)
                        },
                        new
                        {
                            Id = 3,
                            CaseId = 3,
                            Date = new DateOnly(2023, 1, 3)
                        },
                        new
                        {
                            Id = 4,
                            CaseId = 4,
                            Date = new DateOnly(2023, 1, 4)
                        },
                        new
                        {
                            Id = 5,
                            CaseId = 5,
                            Date = new DateOnly(2023, 1, 5)
                        },
                        new
                        {
                            Id = 6,
                            CaseId = 6,
                            Date = new DateOnly(2023, 1, 15)
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("DATE");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId")
                        .IsUnique();

                    b.ToTable("Receipts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2023, 1, 1),
                            PrescriptionId = 1,
                            TotalPrice = 148m
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2023, 1, 2),
                            PrescriptionId = 2,
                            TotalPrice = 20m
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2023, 1, 3),
                            PrescriptionId = 3,
                            TotalPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2023, 1, 4),
                            PrescriptionId = 4,
                            TotalPrice = 225m
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2023, 1, 5),
                            PrescriptionId = 5,
                            TotalPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(2023, 1, 15),
                            PrescriptionId = 6,
                            TotalPrice = 105m
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Species", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cattle"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Horse"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sheep"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Goat"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pig"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Geese"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Duck"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pigeon"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Dog"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cat"
                        });
                });

            modelBuilder.Entity("VCMS.Core.Models.Case", b =>
                {
                    b.HasOne("VCMS.Core.Models.Diagnosis", "Diagnosis")
                        .WithMany("Cases")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VCMS.Core.Models.Doctor", "Doctor")
                        .WithMany("Cases")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VCMS.Core.Models.Patient", "Patient")
                        .WithMany("Cases")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VCMS.Core.Models.Patient", b =>
                {
                    b.HasOne("VCMS.Core.Models.Client", "Client")
                        .WithMany("Patients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VCMS.Core.Models.Species", "Species")
                        .WithMany("Patients")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("VCMS.Core.Models.PrescribedMeds", b =>
                {
                    b.HasOne("VCMS.Core.Models.Medication", "Medication")
                        .WithMany("PrescribedMeds")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VCMS.Core.Models.Prescription", "Prescription")
                        .WithMany("PrescribedMeds")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("VCMS.Core.Models.Prescription", b =>
                {
                    b.HasOne("VCMS.Core.Models.Case", "Case")
                        .WithOne("Prescription")
                        .HasForeignKey("VCMS.Core.Models.Prescription", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("VCMS.Core.Models.Receipt", b =>
                {
                    b.HasOne("VCMS.Core.Models.Prescription", "Prescription")
                        .WithOne("Receipt")
                        .HasForeignKey("VCMS.Core.Models.Receipt", "PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("VCMS.Core.Models.Case", b =>
                {
                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("VCMS.Core.Models.Client", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("VCMS.Core.Models.Diagnosis", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("VCMS.Core.Models.Doctor", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("VCMS.Core.Models.Medication", b =>
                {
                    b.Navigation("PrescribedMeds");
                });

            modelBuilder.Entity("VCMS.Core.Models.Patient", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("VCMS.Core.Models.Prescription", b =>
                {
                    b.Navigation("PrescribedMeds");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("VCMS.Core.Models.Species", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
